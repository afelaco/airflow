# ---- GitHub Actions Workflow: CI/CD Pipeline ----
# This workflow automates the CI/CD process for the project, including code quality checks,
# running tests, and building/publishing a Docker image.

name: CI/CD Pipeline

# Define environment variables for Airflow and Python versions
env:
  AIRFLOW_VERSION: "3.0.6"
  PYTHON_VERSION: "3.12"

# Trigger the workflow on push or pull request events to the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ---- CI Tests ----
  # This job performs code quality checks and runs tests.
  ci-tests:
    if: github.event_name == 'pull_request'
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up Python environment
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Install uv
      - name: Install uv
        run: pip install uv

      # Install runtime and development dependencies
      - name: Install Dependencies
        run: uv sync --group dev

      # Perform linting checks using Ruff
      - name: Lint Check
        run: uv run ruff check .

      # Check code formatting using Ruff
      - name: Format Check
        run: uv run ruff format --check .

      # Perform type checking using MyPy
      - name: Type Check
        run: uv run mypy .

      # Run unit tests using Pytest
      - name: Run Tests
        run: uv run pytest

  # ---- Build & Upload Python Wheel ----
  # This job builds the Python wheel and uploads it as an artifact.
  build-and-upload-wheel:
#    if: github.event_name == 'push'
    name: Build & Upload Python Wheel
    runs-on: ubuntu-latest
    outputs:
      wheel_file: ${{ steps.build_wheel.outputs.wheel_file }}
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Install uv
      - name: Install uv
        run: pip install uv

      # Build the wheel file
      - name: Build Python Wheel
        id: build_wheel
        run: |
          uv build --wheel
          wheel_file=$(basename dist/*.whl)
          echo "wheel_file=$wheel_file" >> $GITHUB_OUTPUT

      # Publish the wheel file to PyPI
      - name: Publish Wheel to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # ---- Build & Push Docker Image ----
  # This job builds and publishes the Docker image to Docker Hub.
  docker-build-push:
    if: github.event_name == 'push'
    needs: build-and-upload-wheel
    name: Build & Publish Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read  # Read access to repository contents
      packages: write # Write access to Docker packages
    env:
      # Define the Docker image name and wheel file name
      IMAGE_NAME: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/airflow
      WHEEL_NAME: ${{ needs.build-and-upload-wheel.outputs.wheel_file }}
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Download the wheel artifact
      - name: Download Wheel Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-wheel
          path: dist/

      # Log in to Docker Hub using credentials stored in GitHub Secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Extract metadata for the Docker image (e.g., tags, labels)
      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      # Build and push the Docker image to Docker Hub
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            AIRFLOW_VERSION=${{ env.AIRFLOW_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            WHEEL_FILE=${{ env.WHEEL_NAME }}